{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Frequenz Weather API","text":""},{"location":"#overview","title":"Overview","text":"<p>This Weather Forecast API provides access to weather forecast data. The forecast  data includes features such as wind components and solar radiation levels at specified geographic coordinates. The forecasting process involves predicting atmospheric conditions based on various factors and models. The data provided by this API represents the forecasted state of the atmosphere at different heights above the ground and for various forecast creation times. </p>"},{"location":"#objective","title":"Objective","text":"<p>The primary objective of this API is to provide real-time and historical weather forecast data to enable more efficient energy management, trading, and planning within microgrids and larger gridpool portfolios.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Real-time Weather Forecasting: Access current atmospheric conditions based on  recent data.</li> <li>Historical Data Access: Retrieve past weather forecasts for analysis and trend  prediction.</li> <li>Feature Customization: Choose from a variety of weather features like wind speed,  solar radiation, and more.</li> <li>Geographical Flexibility: Get forecasts for any location specified by latitude and  longitude.</li> </ul>"},{"location":"#example-use-cases","title":"Example Use Cases","text":"<ul> <li>Adjusting the trading of photovoltaic (PV) surplus production based on future  solar radiation forecasts.</li> <li>Feeding excess energy into batteries when low consumption or high production is  forecasted.</li> <li>Dynamic pricing strategies for energy trading based on anticipated weather  conditions.</li> <li>Resource allocation in microgrids for anticipated energy demands, guided by  weather forecasts.</li> <li>Risk assessment and contingency planning for severe weather events.</li> </ul>"},{"location":"#target-audience","title":"Target Audience","text":"<p>This API is designed for application developers in the energy sector who focus on the tasks of optimizing microgrid electricity flows or trading of energy. Its design aims to be as developer-friendly as possible, requiring no prior knowledge in electrical engineering and systems and/or weather forecast services. </p>"},{"location":"#contributing","title":"Contributing","text":"<p>If you want to know how to build this project and contribute to it, please check out the Contributing Guide.</p>"},{"location":"CONTRIBUTING/","title":"Contributing to Frequenz Weather API","text":""},{"location":"CONTRIBUTING/#build","title":"Build","text":"<p>You can use <code>build</code> to simply build the source and binary distribution:</p> <pre><code>python -m pip install build\npython -m build\n</code></pre>"},{"location":"CONTRIBUTING/#local-development","title":"Local development","text":"<p>You need to make sure you have the <code>git submodules</code> updated:</p> <pre><code>git submodule update --init\n</code></pre>"},{"location":"CONTRIBUTING/#running-protolint","title":"Running protolint","text":"<p>To make sure some common mistakes are avoided and to ensure a consistent style it is recommended to run <code>protolint</code>. After you installed <code>protolint</code>, just run:</p> <pre><code>protolint lint proto\n</code></pre>"},{"location":"CONTRIBUTING/#python-setup","title":"Python setup","text":"<p>You can use editable installs to develop the project locally (it will install all the dependencies too):</p> <pre><code>python -m pip install -e .\n</code></pre> <p>This will also generate the Python files from the <code>proto/</code> files and leave them in <code>py/</code>, so you can inspect them.</p> <p>Or you can install all development dependencies (<code>mypy</code>, <code>pylint</code>, <code>pytest</code>, etc.) in one go too: <pre><code>python -m pip install -e .[dev]\n</code></pre></p> <p>If you don't want to install all the dependencies, you can also use <code>nox</code> to run the tests and other checks creating its own virtual environments:</p> <pre><code>python -m pip install .[dev-noxfile]\nnox\n</code></pre> <p>You can also use <code>nox -R</code> to reuse the current testing environment to speed up test at the expense of a higher chance to end up with a dirty test environment.</p>"},{"location":"CONTRIBUTING/#upgrading-dependencies","title":"Upgrading dependencies","text":"<p>If you want to update the dependency <code>frequenz-api-common</code>, then you need to:</p> <ol> <li>Update the submodule <code>frequenz-api-common</code></li> <li>Update the version of the <code>frequenz-api-common</code> package in <code>pyproject.toml</code></li> </ol> <p>The version of <code>frequenz-api-common</code> used in both places mentioned above should be the same.</p> <p>Here is an example of upgrading the <code>frequenz-api-common</code> dependency to version <code>v0.2.0</code>: <pre><code>ver=\"0.2.0\"\n\ncd submodules/frequenz-api-common\ngit remote update\ngit checkout v${ver}\ncd -\n\nsed s/\"frequenz-api-common == [0-9]\\.[0-9]\\.[0-9]\"/\"frequenz-api-common == ${ver}\"/g -i pyproject.toml\n</code></pre></p>"},{"location":"CONTRIBUTING/#running-tests-checks-individually","title":"Running tests / checks individually","text":"<p>For a better development test cycle you can install the runtime and test dependencies and run <code>pytest</code> manually.</p> <pre><code>python -m pip install .[dev-pytest]  # included in .[dev] too\n\n# And for example\npytest tests/test_*.py\n</code></pre> <p>Or you can use <code>nox</code>:</p> <pre><code>nox -R -s pytest -- test/test_*.py\n</code></pre> <p>The same appliest to <code>pylint</code> or <code>mypy</code> for example:</p> <pre><code>nox -R -s pylint -- test/test_*.py\nnox -R -s mypy -- test/test_*.py\n</code></pre>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the documentation","text":"<p>To build the documentation, first install the dependencies (if you didn't install all <code>dev</code> dependencies):</p> <pre><code>python -m pip install -e .[dev-mkdocs]\n</code></pre> <p>Then you can build the documentation (it will be written in the <code>site/</code> directory):</p> <pre><code>mkdocs build\n</code></pre> <p>Or you can just serve the documentation without building it using:</p> <pre><code>mkdocs serve\n</code></pre> <p>Your site will be updated live when you change your files (provided that you used <code>pip install -e .</code>, beware of a common pitfall of using <code>pip install</code> without <code>-e</code>, in that case the API reference won't change unless you do a new <code>pip install</code>).</p> <p>To build multi-version documentation, we use mike. If you want to see how the multi-version sites looks like locally, you can use:</p> <pre><code>mike deploy my-version\nmike set-default my-version\nmike serve\n</code></pre> <p><code>mike</code> works in mysterious ways. Some basic information:</p> <ul> <li><code>mike deploy</code> will do a <code>mike build</code> and write the results to your local <code>gh-pages</code> branch. <code>my-version</code> is an arbitrary name for the local version   you want to preview.</li> <li><code>mike set-default</code> is needed so when you serve the documentation, it goes to   your newly produced documentation by default.</li> <li><code>mike serve</code> will serve the contents of your local <code>gh-pages</code> branch. Be   aware that, unlike <code>mkdocs serve</code>, changes to the sources won't be shown   live, as the <code>mike deploy</code> step is needed to refresh them.</li> </ul> <p>Be careful not to use <code>--push</code> with <code>mike deploy</code>, otherwise it will push your local <code>gh-pages</code> branch to the <code>origin</code> remote.</p> <p>That said, if you want to test the actual website in your fork, you can always use <code>mike deploy --push --remote your-fork-remote</code>, and then access the GitHub pages produced for your fork.</p>"},{"location":"CONTRIBUTING/#releasing","title":"Releasing","text":"<p>These are the steps to create a new release:</p> <ol> <li> <p>Get the latest head you want to create a release from.</p> </li> <li> <p>Update the <code>RELEASE_NOTES.md</code> file if it is not complete, up to date, and    remove template comments (<code>&lt;!-- ... -&gt;</code>) and empty sections. Submit a pull    request if an update is needed, wait until it is merged, and update the    latest head you want to create a release from to get the new merged pull    request.</p> </li> <li> <p>Create a new signed tag using the release notes and    a semver compatible version number with a <code>v</code> prefix,    for example:</p> </li> </ol> <pre><code>git tag -s --cleanup=whitespace -F RELEASE_NOTES.md v0.0.1\n</code></pre> <ol> <li> <p>Push the new tag.</p> </li> <li> <p>A GitHub action will test the tag and if all goes well it will create    a GitHub    Release,    and upload a new package to    PyPI    automatically.</p> </li> <li> <p>Once this is done, reset the <code>RELEASE_NOTES.md</code> with the template:</p> </li> </ol> <pre><code>cp .github/RELEASE_NOTES.template.md RELEASE_NOTES.md\n</code></pre> <p>Commit the new release notes and create a PR (this step should be automated    eventually too).</p> <ol> <li>Celebrate!</li> </ol>"},{"location":"SUMMARY/","title":"SUMMARY","text":"<ul> <li>Home</li> <li>Protobuf API Reference</li> <li>Python API Reference</li> <li>Contributing</li> </ul>"},{"location":"protobuf-reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>api<ul> <li>common<ul> <li>location.proto</li> <li>pagination<ul> <li>pagination_info.proto</li> <li>pagination_params.proto</li> </ul> </li> </ul> </li> <li>weather<ul> <li>weather.proto</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"protobuf-reference/frequenz/api/common/location/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/location/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/location.proto</p> <ul> <li>Location</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/location/#frequenzapicommonlocationproto","title":"frequenz/api/common/location.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/location/#location","title":"Location","text":"<p>A pair of geographical co-ordinates, representing the location of a place.</p> Field Type Label Description latitude float Latitude ranges from -90 (South) to 90 (North) longitude float Longitude ranges from -180 (West) to 180 (East) country_code string Country ISO 3166-1 Alpha 2"},{"location":"protobuf-reference/frequenz/api/common/location/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_info/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_info/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/pagination/pagination_info.proto</p> <ul> <li>PaginationInfo</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_info/#frequenzapicommonpaginationpagination_infoproto","title":"frequenz/api/common/pagination/pagination_info.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_info/#paginationinfo","title":"PaginationInfo","text":"<p>A message providing metadata about paginated list results. The PaginationInfo message delivers metadata concerning the paginated list results and should be appended to the response message of a list request. The total_items field must be set to the total count of items that adhere to the filter criteria defined in the request. The next_page_token field should be populated with the token to be used in the subsequent request to fetch the next page of results. If there are no additional results, the next_page_token field should be omitted.</p> Field Type Label Description total_items uint32 The total number of items that match the filter criteria defined in the request. next_page_token string optional Token for retrieving the next set of results."},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_info/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_params/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_params/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/common/pagination/pagination_params.proto</p> <ul> <li>PaginationParams</li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_params/#frequenzapicommonpaginationpagination_paramsproto","title":"frequenz/api/common/pagination/pagination_params.proto","text":""},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_params/#paginationparams","title":"PaginationParams","text":"<p>A message defining parameters for paginating list requests. It can be appended to a request message to specify the desired page of results and the maximum number of results per page. For initial requests (requesting the first page), the page_token should not be provided. For subsequent requests (requesting any page after the first), the next_page_token from the previous responses PaginationInfo must be supplied. The page_size should only be specified in the initial request and will be disregarded in subsequent requests.</p> Field Type Label Description page_size uint32 optional The maximum number of results to be returned per request. page_token string optional The token identifying a specific page of the list results."},{"location":"protobuf-reference/frequenz/api/common/pagination/pagination_params/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"protobuf-reference/frequenz/api/weather/weather/","title":"Protocol Documentation","text":""},{"location":"protobuf-reference/frequenz/api/weather/weather/#table-of-contents","title":"Table of Contents","text":"<ul> <li> <p>frequenz/api/weather/weather.proto</p> <ul> <li>GetHistoricalWeatherForecastRequest</li> <li>GetHistoricalWeatherForecastResponse</li> <li>LocationForecast</li> <li>LocationForecast.Forecasts</li> <li>LocationForecast.Forecasts.FeatureForecast</li> <li>ReceiveLiveWeatherForecastRequest</li> <li> <p>ReceiveLiveWeatherForecastResponse</p> </li> <li> <p>ForecastFeature</p> </li> <li> <p>WeatherForecastService</p> </li> </ul> </li> <li> <p>Scalar Value Types</p> </li> </ul> <p></p> <p>Top</p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#frequenzapiweatherweatherproto","title":"frequenz/api/weather/weather.proto","text":""},{"location":"protobuf-reference/frequenz/api/weather/weather/#gethistoricalweatherforecastrequest","title":"GetHistoricalWeatherForecastRequest","text":"<p>The <code>GetHistoricalWeatherForecastRequest</code> message defines parameters for retrieving historical weather forecasts, targeting a specific location and time period, with designated features.</p> Field Type Label Description locations Location repeated The locations for which the forecast is being requested. The maximum number of locations that can be requested is 50. If the request exceeds this limit, the API will respond with an error. features ForecastFeature repeated List of required features. If none are specified, all available features will be returned. start_ts google.protobuf.Timestamp The UTC timestamp indicating the start of the requested historical forecast period. end_ts google.protobuf.Timestamp The UTC timestamp indicating the end of the requested historical forecast period. pagination_params PaginationParams The parameters define the 'page_size' and the 'page_token'. An inital query of a request will omit the 'page_token'. Subsequent queries of the same request must include the 'page_token' from the previous response. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#gethistoricalweatherforecastresponse","title":"GetHistoricalWeatherForecastResponse","text":"<p>The message encapsulates a collection of historical weather forecasts, each corresponding to a requested location.</p> Field Type Label Description location_forecasts LocationForecast repeated pagination_info PaginationInfo The pagination_info contains the number of 'total_items' in the response and the 'next_page_token' for the subsequent query of the request. It is omitted in the last response. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#locationforecast","title":"LocationForecast","text":"<p>The <code>ForecastResponse</code> message  provides a structured format for representing forecast data for a specific location, including UTC timestamps for validity and creation.</p> Field Type Label Description forecasts LocationForecast.Forecasts repeated Weather forecasts. location Location The location for which the weather data is returned. creation_ts google.protobuf.Timestamp The UTC timestamp indicating when the forecast was originally created. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#locationforecastforecasts","title":"LocationForecast.Forecasts","text":"<p>Holds all weather features forecast for a certain point in time.</p> Field Type Label Description valid_at_ts google.protobuf.Timestamp The UTC timestamp for which the features in this entry are valid for. features LocationForecast.Forecasts.FeatureForecast repeated All requested weather features. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#locationforecastforecastsfeatureforecast","title":"LocationForecast.Forecasts.FeatureForecast","text":"<p>Holds the forecast for a single weather feature.</p> Field Type Label Description feature ForecastFeature value float Value of the feature. Unit depends on the feature (e.g., m/s for wind speed, W/m\u00b2 for radiation). Details can be found in the ForecastFeature enum under each feature. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#receiveliveweatherforecastrequest","title":"ReceiveLiveWeatherForecastRequest","text":"<p>The <code>ReceiveLiveWeatherForecastRequest</code> message defines parameters for requesting live weather forecasts for a specified location, with designated features.</p> Field Type Label Description locations Location repeated The locations for which the forecast is being requested. The maximum number of locations that can be requested is 50. If the request exceeds this limit, the API will respond with an error. features ForecastFeature repeated List of required features. If none are specified, all available features will be streamed. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#receiveliveweatherforecastresponse","title":"ReceiveLiveWeatherForecastResponse","text":"<p>The message encapsulates a collection of live weather forecasts, each corresponding to a requested location.</p> Field Type Label Description location_forecasts LocationForecast repeated <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#forecastfeature","title":"ForecastFeature","text":"<p>Weather features (e.g. wind speeds or solar radiation) available for query through the API.</p> Name Number Description FORECAST_FEATURE_UNSPECIFIED 0 Default value. When used, the API responds with all features listed below. FORECAST_FEATURE_U_WIND_COMPONENT_100_METRE 1 Eastward component of the wind at 100 m altitude. It is the horizontal speed of air moving towards the east, at a height of 100 metres above the surface of the Earth. A positive value indicates eastward wind, and a negative value indicates westward wind. Typical range is -20 to 20 m/s. Measured in m/s. FORECAST_FEATURE_V_WIND_COMPONENT_100_METRE 2 Northward component wind at 100 m altitude. It is the horizontal speed of air moving towards the north, at a height of 100 metres above the surface of the Earth. A positive value indicates northward wind, and a negative value indicates southward wind. Typical range is -20 to 20 m/s. Measured in m/s. FORECAST_FEATURE_SURFACE_SOLAR_RADIATION_DOWNWARDS 3 Amount of solar radiation (shortwave radiation, direct and diffused) that reaches a horizontal plane at the surface of the Earth. Measured in W/m\u00b2. FORECAST_FEATURE_SURFACE_NET_SOLAR_RADIATION 4 Amount of solar radiation (shortwave radiation, direct and diffused) that reaches a horizontal plane at the surface of the Earth minus the amount reflected by the Earth's surface (which is governed by the albedo). Measured in W/m\u00b2. <p></p>"},{"location":"protobuf-reference/frequenz/api/weather/weather/#weatherforecastservice","title":"WeatherForecastService","text":"<p>Service provides operations related to retrieving weather forecasts for locations.</p> <p>The forecasts are updated regularly, and the service will stream the latest available data unless a specific time range is requested.</p> <p>Note</p> <p>Weather forecasts are inherently uncertain and actual conditions may vary. Use the data responsibly.</p> Method Name Request Type Response Type Description GetHistoricalWeatherForecast GetHistoricalWeatherForecastRequest GetHistoricalWeatherForecastResponse Returns historical weather forecast features for a geo location for a specified time range. ReceiveLiveWeatherForecast ReceiveLiveWeatherForecastRequest ReceiveLiveWeatherForecastResponse stream Streams live weather forecast features for a geo location as they become available. Initially, the most recent forecast will be streamed."},{"location":"protobuf-reference/frequenz/api/weather/weather/#scalar-value-types","title":"Scalar Value Types","text":".proto Type Notes C++ Java Python Go C# PHP Ruby  double double double float float64 double float Float  float float float float float32 float float Float  int32 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint32 instead. int32 int int int32 int integer Bignum or Fixnum (as required)  int64 Uses variable-length encoding. Inefficient for encoding negative numbers \u2013 if your field is likely to have negative values, use sint64 instead. int64 long int/long int64 long integer/string Bignum  uint32 Uses variable-length encoding. uint32 int int/long uint32 uint integer Bignum or Fixnum (as required)  uint64 Uses variable-length encoding. uint64 long int/long uint64 ulong integer/string Bignum or Fixnum (as required)  sint32 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int32s. int32 int int int32 int integer Bignum or Fixnum (as required)  sint64 Uses variable-length encoding. Signed int value. These more efficiently encode negative numbers than regular int64s. int64 long int/long int64 long integer/string Bignum  fixed32 Always four bytes. More efficient than uint32 if values are often greater than 2^28. uint32 int int uint32 uint integer Bignum or Fixnum (as required)  fixed64 Always eight bytes. More efficient than uint64 if values are often greater than 2^56. uint64 long int/long uint64 ulong integer/string Bignum  sfixed32 Always four bytes. int32 int int int32 int integer Bignum or Fixnum (as required)  sfixed64 Always eight bytes. int64 long int/long int64 long integer/string Bignum  bool bool boolean boolean bool bool boolean TrueClass/FalseClass  string A string must always contain UTF-8 encoded or 7-bit ASCII text. string String str/unicode string string string String (UTF-8)  bytes May contain any arbitrary sequence of bytes. string ByteString str []byte ByteString string String (ASCII-8BIT)"},{"location":"python-reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>frequenz<ul> <li>api<ul> <li>weather</li> </ul> </li> <li>client<ul> <li>weather</li> </ul> </li> </ul> </li> </ul>"},{"location":"python-reference/frequenz/api/weather/","title":"weather","text":""},{"location":"python-reference/frequenz/api/weather/#frequenz.api.weather","title":"frequenz.api.weather","text":"<p>Protobuf spec for the weather API.</p>"},{"location":"python-reference/frequenz/client/weather/","title":"weather","text":""},{"location":"python-reference/frequenz/client/weather/#frequenz.client.weather","title":"frequenz.client.weather","text":""}]}